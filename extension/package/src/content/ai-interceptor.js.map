{"version":3,"file":"ai-interceptor.js","sources":["../../../src/content/ai-interceptor.ts"],"sourcesContent":["/**\n * AI Conversation Interceptor\n * \n * Content script that runs on AI platform pages (ChatGPT, Claude, Gemini)\n * and intercepts conversations to log them locally.\n */\n\nimport { aiLogger } from '../loggers/ai-conversation-logger';\nimport { AIMessage, AIPlatform } from '../types';\n\nclass AIInterceptor {\n  private platform: AIPlatform | null = null;\n  private currentConversation: AIMessage[] = [];\n  private conversationId: string | null = null;\n\n  constructor() {\n    this.platform = aiLogger.detectPlatform(window.location.href);\n    if (this.platform) {\n      console.log('[LNA] AI Interceptor active on:', this.platform);\n      this.init();\n    }\n  }\n\n  /**\n   * Initialize interceptor based on platform\n   */\n  private init(): void {\n    switch (this.platform) {\n      case 'ChatGPT':\n        this.interceptChatGPT();\n        break;\n      case 'Claude':\n        this.interceptClaude();\n        break;\n      case 'Gemini':\n        this.interceptGemini();\n        break;\n      case 'Perplexity':\n        this.interceptPerplexity();\n        break;\n    }\n  }\n\n  /**\n   * Intercept ChatGPT conversations\n   */\n  private interceptChatGPT(): void {\n    // Method 1: Intercept fetch requests\n    const originalFetch = window.fetch;\n    window.fetch = async (...args) => {\n      const response = await originalFetch(...args);\n      \n      // Check if this is a ChatGPT API call\n      const url = args[0].toString();\n      if (url.includes('api.openai.com/v1/chat/completions') || \n          url.includes('chat.openai.com/backend-api/conversation')) {\n        \n        // Clone response to read it\n        const clonedResponse = response.clone();\n        try {\n          const data = await clonedResponse.json();\n          this.handleChatGPTResponse(data);\n        } catch (error) {\n          console.error('[LNA] Error parsing ChatGPT response:', error);\n        }\n      }\n      \n      return response;\n    };\n\n    // Method 2: Observe DOM changes\n    this.observeChatGPTDOM();\n  }\n\n  /**\n   * Observe ChatGPT DOM for new messages\n   */\n  private observeChatGPTDOM(): void {\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        mutation.addedNodes.forEach((node) => {\n          if (node.nodeType === Node.ELEMENT_NODE) {\n            const element = node as Element;\n            \n            // Look for message containers\n            if (element.matches('[data-message-author-role]') || \n                element.querySelector('[data-message-author-role]')) {\n              this.extractChatGPTMessage(element);\n            }\n          }\n        });\n      });\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  /**\n   * Extract message from ChatGPT DOM element\n   */\n  private extractChatGPTMessage(element: Element): void {\n    const role = element.getAttribute('data-message-author-role') || \n                 element.querySelector('[data-message-author-role]')?.getAttribute('data-message-author-role');\n    \n    const contentElement = element.querySelector('.markdown, .whitespace-pre-wrap');\n    const content = contentElement?.textContent?.trim();\n\n    if (role && content) {\n      this.addMessage({\n        role: role as 'user' | 'assistant',\n        content,\n        timestamp: Date.now()\n      });\n    }\n  }\n\n  /**\n   * Handle ChatGPT API response\n   */\n  private handleChatGPTResponse(data: any): void {\n    const messages = aiLogger.parseConversation(data, 'ChatGPT');\n    messages.forEach(msg => this.addMessage(msg));\n  }\n\n  /**\n   * Intercept Claude conversations\n   */\n  private interceptClaude(): void {\n    // Method 1: Intercept fetch requests\n    const originalFetch = window.fetch;\n    window.fetch = async (...args) => {\n      const response = await originalFetch(...args);\n      \n      const url = args[0].toString();\n      if (url.includes('claude.ai/api')) {\n        const clonedResponse = response.clone();\n        try {\n          const data = await clonedResponse.json();\n          this.handleClaudeResponse(data);\n        } catch (error) {\n          console.error('[LNA] Error parsing Claude response:', error);\n        }\n      }\n      \n      return response;\n    };\n\n    // Method 2: Observe DOM changes\n    this.observeClaudeDOM();\n  }\n\n  /**\n   * Observe Claude DOM for new messages\n   */\n  private observeClaudeDOM(): void {\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        mutation.addedNodes.forEach((node) => {\n          if (node.nodeType === Node.ELEMENT_NODE) {\n            const element = node as Element;\n            \n            // Look for message containers (Claude uses different class names)\n            if (element.matches('[class*=\"message\"]') || \n                element.querySelector('[class*=\"message\"]')) {\n              this.extractClaudeMessage(element);\n            }\n          }\n        });\n      });\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  /**\n   * Extract message from Claude DOM element\n   */\n  private extractClaudeMessage(element: Element): void {\n    // Claude's DOM structure varies, so we use heuristics\n    const isUserMessage = element.classList.contains('user') || \n                          element.querySelector('[class*=\"user\"]');\n    const isAssistantMessage = element.classList.contains('assistant') || \n                               element.querySelector('[class*=\"assistant\"]');\n\n    if (isUserMessage || isAssistantMessage) {\n      const content = element.textContent?.trim();\n      if (content) {\n        this.addMessage({\n          role: isUserMessage ? 'user' : 'assistant',\n          content,\n          timestamp: Date.now()\n        });\n      }\n    }\n  }\n\n  /**\n   * Handle Claude API response\n   */\n  private handleClaudeResponse(data: any): void {\n    const messages = aiLogger.parseConversation(data, 'Claude');\n    messages.forEach(msg => this.addMessage(msg));\n  }\n\n  /**\n   * Intercept Gemini conversations\n   */\n  private interceptGemini(): void {\n    // Similar approach to ChatGPT and Claude\n    const originalFetch = window.fetch;\n    window.fetch = async (...args) => {\n      const response = await originalFetch(...args);\n      \n      const url = args[0].toString();\n      if (url.includes('generativelanguage.googleapis.com')) {\n        const clonedResponse = response.clone();\n        try {\n          const data = await clonedResponse.json();\n          this.handleGeminiResponse(data);\n        } catch (error) {\n          console.error('[LNA] Error parsing Gemini response:', error);\n        }\n      }\n      \n      return response;\n    };\n\n    this.observeGeminiDOM();\n  }\n\n  /**\n   * Observe Gemini DOM for new messages\n   */\n  private observeGeminiDOM(): void {\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        mutation.addedNodes.forEach((node) => {\n          if (node.nodeType === Node.ELEMENT_NODE) {\n            const element = node as Element;\n            this.extractGeminiMessage(element);\n          }\n        });\n      });\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  /**\n   * Extract message from Gemini DOM element\n   */\n  private extractGeminiMessage(element: Element): void {\n    // Gemini-specific selectors\n    const messageElements = element.querySelectorAll('[class*=\"message\"]');\n    messageElements.forEach(msgElement => {\n      const content = msgElement.textContent?.trim();\n      if (content) {\n        // Determine role based on element attributes or position\n        const role = msgElement.classList.contains('user-message') ? 'user' : 'assistant';\n        this.addMessage({\n          role,\n          content,\n          timestamp: Date.now()\n        });\n      }\n    });\n  }\n\n  /**\n   * Handle Gemini API response\n   */\n  private handleGeminiResponse(data: any): void {\n    const messages = aiLogger.parseConversation(data, 'Gemini');\n    messages.forEach(msg => this.addMessage(msg));\n  }\n\n  /**\n   * Intercept Perplexity conversations\n   */\n  private interceptPerplexity(): void {\n    // Similar to ChatGPT (Perplexity uses similar API structure)\n    const originalFetch = window.fetch;\n    window.fetch = async (...args) => {\n      const response = await originalFetch(...args);\n      \n      const url = args[0].toString();\n      if (url.includes('perplexity.ai/api')) {\n        const clonedResponse = response.clone();\n        try {\n          const data = await clonedResponse.json();\n          this.handlePerplexityResponse(data);\n        } catch (error) {\n          console.error('[LNA] Error parsing Perplexity response:', error);\n        }\n      }\n      \n      return response;\n    };\n  }\n\n  /**\n   * Handle Perplexity API response\n   */\n  private handlePerplexityResponse(data: any): void {\n    const messages = aiLogger.parseConversation(data, 'Perplexity');\n    messages.forEach(msg => this.addMessage(msg));\n  }\n\n  /**\n   * Add message to current conversation\n   */\n  private addMessage(message: AIMessage): void {\n    this.currentConversation.push(message);\n    \n    // Save conversation after each exchange (user + assistant)\n    if (this.shouldSaveConversation()) {\n      this.saveCurrentConversation();\n    }\n  }\n\n  /**\n   * Determine if conversation should be saved\n   */\n  private shouldSaveConversation(): boolean {\n    // Save after every complete exchange (user message + assistant response)\n    const lastTwoMessages = this.currentConversation.slice(-2);\n    if (lastTwoMessages.length === 2) {\n      return lastTwoMessages[0].role === 'user' && lastTwoMessages[1].role === 'assistant';\n    }\n    return false;\n  }\n\n  /**\n   * Save current conversation\n   */\n  private async saveCurrentConversation(): Promise<void> {\n    if (this.currentConversation.length === 0 || !this.platform) return;\n\n    try {\n      const conversation = await aiLogger.logConversation(\n        this.platform,\n        [...this.currentConversation] // Clone array\n      );\n\n      console.log('[LNA] Conversation saved:', conversation.id);\n      \n      // Show notification\n      this.showNotification(`Conversation saved: ${conversation.title}`);\n      \n      // Update conversation ID\n      this.conversationId = conversation.id;\n    } catch (error) {\n      console.error('[LNA] Error saving conversation:', error);\n    }\n  }\n\n  /**\n   * Show notification to user\n   */\n  private showNotification(message: string): void {\n    // Create notification element\n    const notification = document.createElement('div');\n    notification.textContent = `🗄️ LNA: ${message}`;\n    notification.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      background: #10b981;\n      color: white;\n      padding: 12px 20px;\n      border-radius: 8px;\n      font-family: system-ui, -apple-system, sans-serif;\n      font-size: 14px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      z-index: 10000;\n      animation: slideIn 0.3s ease-out;\n    `;\n\n    // Add animation\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes slideIn {\n        from {\n          transform: translateX(400px);\n          opacity: 0;\n        }\n        to {\n          transform: translateX(0);\n          opacity: 1;\n        }\n      }\n    `;\n    document.head.appendChild(style);\n\n    document.body.appendChild(notification);\n\n    // Remove after 3 seconds\n    setTimeout(() => {\n      notification.style.animation = 'slideIn 0.3s ease-out reverse';\n      setTimeout(() => notification.remove(), 300);\n    }, 3000);\n  }\n}\n\n// Initialize interceptor when page loads\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => {\n    new AIInterceptor();\n  });\n} else {\n  new AIInterceptor();\n}\n\nexport default AIInterceptor;\n\n"],"names":[],"mappings":"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"}