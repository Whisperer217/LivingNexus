{"version":3,"file":"manual-scraper.js","sources":["../../../src/content/manual-scraper.ts"],"sourcesContent":["/**\n * Manual Conversation Scraper\n * Scrapes AI conversations from the current page when user clicks \"Save\"\n */\n\ninterface ScrapedMessage {\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp?: number;\n}\n\ninterface ScrapedConversation {\n  platform: 'ChatGPT' | 'Claude' | 'Gemini' | 'Perplexity' | 'Unknown';\n  title: string;\n  messages: ScrapedMessage[];\n  url: string;\n  timestamp: number;\n}\n\nclass ManualConversationScraper {\n  /**\n   * Detect which AI platform we're on\n   */\n  private detectPlatform(): ScrapedConversation['platform'] {\n    const hostname = window.location.hostname;\n    \n    if (hostname.includes('chatgpt.com') || hostname.includes('openai.com')) {\n      return 'ChatGPT';\n    } else if (hostname.includes('claude.ai') || hostname.includes('anthropic.com')) {\n      return 'Claude';\n    } else if (hostname.includes('gemini.google.com')) {\n      return 'Gemini';\n    } else if (hostname.includes('perplexity.ai')) {\n      return 'Perplexity';\n    }\n    \n    return 'Unknown';\n  }\n\n  /**\n   * Scrape ChatGPT conversation\n   */\n  private scrapeChatGPT(): ScrapedMessage[] {\n    const messages: ScrapedMessage[] = [];\n    \n    // ChatGPT uses article elements for messages\n    const messageElements = document.querySelectorAll('[data-message-author-role]');\n    \n    messageElements.forEach((element) => {\n      const role = element.getAttribute('data-message-author-role');\n      const contentElement = element.querySelector('.markdown, .whitespace-pre-wrap');\n      \n      if (contentElement && (role === 'user' || role === 'assistant')) {\n        messages.push({\n          role: role as 'user' | 'assistant',\n          content: contentElement.textContent?.trim() || '',\n          timestamp: Date.now()\n        });\n      }\n    });\n    \n    return messages;\n  }\n\n  /**\n   * Scrape Claude conversation\n   */\n  private scrapeClaude(): ScrapedMessage[] {\n    const messages: ScrapedMessage[] = [];\n    \n    // Claude uses specific class names for messages\n    const userMessages = document.querySelectorAll('[class*=\"user\"], [class*=\"Human\"]');\n    const assistantMessages = document.querySelectorAll('[class*=\"assistant\"], [class*=\"Claude\"]');\n    \n    // Try to interleave messages in order\n    const allMessages = Array.from(document.querySelectorAll('[class*=\"message\"]'));\n    \n    allMessages.forEach((element) => {\n      const text = element.textContent?.trim();\n      if (!text) return;\n      \n      // Heuristic: Determine role based on position or class\n      const isUser = element.className.toLowerCase().includes('user') || \n                     element.className.toLowerCase().includes('human');\n      \n      messages.push({\n        role: isUser ? 'user' : 'assistant',\n        content: text,\n        timestamp: Date.now()\n      });\n    });\n    \n    return messages;\n  }\n\n  /**\n   * Scrape Gemini conversation\n   */\n  private scrapeGemini(): ScrapedMessage[] {\n    const messages: ScrapedMessage[] = [];\n    \n    // Gemini uses message-content class\n    const messageElements = document.querySelectorAll('.message-content, [class*=\"query\"], [class*=\"response\"]');\n    \n    messageElements.forEach((element, index) => {\n      const text = element.textContent?.trim();\n      if (!text) return;\n      \n      // Alternate between user and assistant\n      messages.push({\n        role: index % 2 === 0 ? 'user' : 'assistant',\n        content: text,\n        timestamp: Date.now()\n      });\n    });\n    \n    return messages;\n  }\n\n  /**\n   * Scrape Perplexity conversation\n   */\n  private scrapePerplexity(): ScrapedMessage[] {\n    const messages: ScrapedMessage[] = [];\n    \n    // Perplexity structure\n    const queryElements = document.querySelectorAll('[class*=\"query\"], input[type=\"text\"]');\n    const answerElements = document.querySelectorAll('[class*=\"answer\"], [class*=\"response\"]');\n    \n    // Get the main query\n    const mainQuery = document.querySelector('input[type=\"text\"], textarea');\n    if (mainQuery && mainQuery.textContent) {\n      messages.push({\n        role: 'user',\n        content: mainQuery.textContent.trim(),\n        timestamp: Date.now()\n      });\n    }\n    \n    // Get the answer\n    const mainAnswer = document.querySelector('[class*=\"answer\"]');\n    if (mainAnswer && mainAnswer.textContent) {\n      messages.push({\n        role: 'assistant',\n        content: mainAnswer.textContent.trim(),\n        timestamp: Date.now()\n      });\n    }\n    \n    return messages;\n  }\n\n  /**\n   * Generic scraper for unknown platforms\n   */\n  private scrapeGeneric(): ScrapedMessage[] {\n    const messages: ScrapedMessage[] = [];\n    \n    // Try to find any conversation-like structure\n    const possibleMessages = document.querySelectorAll('p, div[class*=\"message\"], article');\n    \n    possibleMessages.forEach((element, index) => {\n      const text = element.textContent?.trim();\n      if (text && text.length > 20) { // Filter out short snippets\n        messages.push({\n          role: index % 2 === 0 ? 'user' : 'assistant',\n          content: text,\n          timestamp: Date.now()\n        });\n      }\n    });\n    \n    return messages;\n  }\n\n  /**\n   * Generate conversation title from first user message\n   */\n  private generateTitle(messages: ScrapedMessage[]): string {\n    const firstUserMessage = messages.find(m => m.role === 'user');\n    if (!firstUserMessage) return 'Untitled Conversation';\n    \n    // Take first 50 chars of first message\n    const title = firstUserMessage.content.substring(0, 50);\n    return title + (firstUserMessage.content.length > 50 ? '...' : '');\n  }\n\n  /**\n   * Main scraping function\n   */\n  public scrapeCurrentPage(): ScrapedConversation | null {\n    const platform = this.detectPlatform();\n    let messages: ScrapedMessage[] = [];\n    \n    console.log('[LNA Manual Scraper] Scraping platform:', platform);\n    \n    switch (platform) {\n      case 'ChatGPT':\n        messages = this.scrapeChatGPT();\n        break;\n      case 'Claude':\n        messages = this.scrapeClaude();\n        break;\n      case 'Gemini':\n        messages = this.scrapeGemini();\n        break;\n      case 'Perplexity':\n        messages = this.scrapePerplexity();\n        break;\n      default:\n        messages = this.scrapeGeneric();\n    }\n    \n    if (messages.length === 0) {\n      console.warn('[LNA Manual Scraper] No messages found on page');\n      return null;\n    }\n    \n    const conversation: ScrapedConversation = {\n      platform,\n      title: this.generateTitle(messages),\n      messages,\n      url: window.location.href,\n      timestamp: Date.now()\n    };\n    \n    console.log('[LNA Manual Scraper] Scraped conversation:', conversation);\n    \n    return conversation;\n  }\n}\n\n// Listen for messages from popup\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.action === 'scrapeConversation') {\n    const scraper = new ManualConversationScraper();\n    const conversation = scraper.scrapeCurrentPage();\n    \n    if (conversation) {\n      sendResponse({ success: true, conversation });\n    } else {\n      sendResponse({ success: false, error: 'No conversation found on this page' });\n    }\n  }\n  \n  return true; // Keep message channel open for async response\n});\n\nconsole.log('[LNA Manual Scraper] Content script loaded');\n\n"],"names":[],"mappings":"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"}