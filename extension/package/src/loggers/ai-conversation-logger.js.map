{"version":3,"file":"ai-conversation-logger.js","sources":["../../../src/loggers/ai-conversation-logger.ts"],"sourcesContent":["/**\n * AI Conversation Logger\n * \n * Automatically captures and saves AI conversations from ChatGPT, Claude, Gemini\n * to local storage as searchable markdown files.\n * \n * This is the \"killer feature\" of Living Nexus Archive.\n */\n\nimport { AIConversation, AIMessage, AIPlatform } from '../types';\n\nexport class AIConversationLogger {\n  private db: IDBDatabase | null = null;\n  private readonly DB_NAME = 'LNA_Conversations';\n  private readonly DB_VERSION = 1;\n\n  constructor() {\n    this.initDatabase();\n  }\n\n  /**\n   * Initialize IndexedDB for storing conversations\n   */\n  private async initDatabase(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // Create conversations store\n        if (!db.objectStoreNames.contains('conversations')) {\n          const store = db.createObjectStore('conversations', { keyPath: 'id' });\n          store.createIndex('platform', 'platform', { unique: false });\n          store.createIndex('timestamp', 'timestamp', { unique: false });\n          store.createIndex('tags', 'tags', { unique: false, multiEntry: true });\n        }\n      };\n    });\n  }\n\n  /**\n   * Detect which AI platform is being used\n   */\n  detectPlatform(url: string): AIPlatform | null {\n    if (url.includes('chat.openai.com') || url.includes('api.openai.com')) {\n      return 'ChatGPT';\n    }\n    if (url.includes('claude.ai')) {\n      return 'Claude';\n    }\n    if (url.includes('gemini.google.com') || url.includes('generativelanguage.googleapis.com')) {\n      return 'Gemini';\n    }\n    if (url.includes('perplexity.ai')) {\n      return 'Perplexity';\n    }\n    return null;\n  }\n\n  /**\n   * Parse conversation from API response\n   */\n  parseConversation(response: any, platform: AIPlatform): AIMessage[] {\n    const messages: AIMessage[] = [];\n\n    switch (platform) {\n      case 'ChatGPT':\n        // OpenAI API format\n        if (response.choices && Array.isArray(response.choices)) {\n          response.choices.forEach((choice: any) => {\n            if (choice.message) {\n              messages.push({\n                role: choice.message.role,\n                content: choice.message.content,\n                timestamp: Date.now()\n              });\n            }\n          });\n        }\n        break;\n\n      case 'Claude':\n        // Anthropic API format\n        if (response.content && Array.isArray(response.content)) {\n          response.content.forEach((item: any) => {\n            if (item.type === 'text') {\n              messages.push({\n                role: response.role || 'assistant',\n                content: item.text,\n                timestamp: Date.now()\n              });\n            }\n          });\n        }\n        break;\n\n      case 'Gemini':\n        // Google Gemini API format\n        if (response.candidates && Array.isArray(response.candidates)) {\n          response.candidates.forEach((candidate: any) => {\n            if (candidate.content && candidate.content.parts) {\n              candidate.content.parts.forEach((part: any) => {\n                if (part.text) {\n                  messages.push({\n                    role: 'assistant',\n                    content: part.text,\n                    timestamp: Date.now()\n                  });\n                }\n              });\n            }\n          });\n        }\n        break;\n\n      case 'Perplexity':\n        // Perplexity API format (similar to OpenAI)\n        if (response.choices && Array.isArray(response.choices)) {\n          response.choices.forEach((choice: any) => {\n            if (choice.message) {\n              messages.push({\n                role: choice.message.role,\n                content: choice.message.content,\n                timestamp: Date.now()\n              });\n            }\n          });\n        }\n        break;\n    }\n\n    return messages;\n  }\n\n  /**\n   * Generate a smart title from the conversation\n   */\n  generateTitle(messages: AIMessage[]): string {\n    if (messages.length === 0) return 'Untitled Conversation';\n\n    // Use the first user message as the title\n    const firstUserMessage = messages.find(m => m.role === 'user');\n    if (!firstUserMessage) return 'Untitled Conversation';\n\n    // Take first 60 characters, clean up\n    let title = firstUserMessage.content\n      .trim()\n      .replace(/\\n/g, ' ')\n      .substring(0, 60);\n\n    if (firstUserMessage.content.length > 60) {\n      title += '...';\n    }\n\n    return title;\n  }\n\n  /**\n   * Auto-generate tags based on content\n   */\n  autoTag(messages: AIMessage[]): string[] {\n    const tags: Set<string> = new Set();\n    const content = messages.map(m => m.content).join(' ').toLowerCase();\n\n    // Programming languages\n    const languages = ['javascript', 'python', 'typescript', 'java', 'rust', 'go', 'c++', 'ruby', 'php'];\n    languages.forEach(lang => {\n      if (content.includes(lang)) tags.add(lang);\n    });\n\n    // Common topics\n    const topics = [\n      { keywords: ['react', 'vue', 'angular', 'svelte'], tag: 'frontend' },\n      { keywords: ['node', 'express', 'fastapi', 'django'], tag: 'backend' },\n      { keywords: ['database', 'sql', 'postgres', 'mongodb'], tag: 'database' },\n      { keywords: ['design', 'ui', 'ux', 'interface'], tag: 'design' },\n      { keywords: ['story', 'character', 'plot', 'narrative'], tag: 'writing' },\n      { keywords: ['business', 'strategy', 'market', 'revenue'], tag: 'business' },\n      { keywords: ['debug', 'error', 'bug', 'fix'], tag: 'debugging' },\n      { keywords: ['learn', 'tutorial', 'explain', 'how to'], tag: 'learning' },\n      { keywords: ['idea', 'brainstorm', 'concept', 'think'], tag: 'ideation' }\n    ];\n\n    topics.forEach(({ keywords, tag }) => {\n      if (keywords.some(keyword => content.includes(keyword))) {\n        tags.add(tag);\n      }\n    });\n\n    return Array.from(tags);\n  }\n\n  /**\n   * Calculate word count\n   */\n  calculateWordCount(messages: AIMessage[]): number {\n    return messages.reduce((count, message) => {\n      return count + message.content.split(/\\s+/).length;\n    }, 0);\n  }\n\n  /**\n   * Convert conversation to markdown format\n   */\n  toMarkdown(conversation: AIConversation): string {\n    const lines: string[] = [];\n\n    // Header\n    lines.push(`# ${conversation.title}`);\n    lines.push('');\n    lines.push(`**Date:** ${new Date(conversation.timestamp).toLocaleString()}`);\n    lines.push(`**Platform:** ${conversation.platform}`);\n    if (conversation.tags.length > 0) {\n      lines.push(`**Tags:** ${conversation.tags.map(t => `#${t}`).join(' ')}`);\n    }\n    lines.push(`**Word Count:** ${conversation.wordCount.toLocaleString()}`);\n    lines.push('');\n    lines.push('---');\n    lines.push('');\n\n    // Messages\n    conversation.messages.forEach(message => {\n      const role = message.role === 'user' ? 'User' : 'Assistant';\n      lines.push(`## ${role}`);\n      lines.push('');\n      lines.push(message.content);\n      lines.push('');\n    });\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * Save conversation to IndexedDB\n   */\n  async saveConversation(conversation: AIConversation): Promise<void> {\n    if (!this.db) {\n      await this.initDatabase();\n    }\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['conversations'], 'readwrite');\n      const store = transaction.objectStore('conversations');\n      const request = store.put(conversation);\n\n      request.onsuccess = () => {\n        console.log('[LNA] Conversation saved:', conversation.id);\n        \n        // Also save as markdown file for easy access\n        this.saveAsMarkdownFile(conversation);\n        \n        resolve();\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  /**\n   * Save conversation as markdown file to Downloads\n   */\n  private async saveAsMarkdownFile(conversation: AIConversation): Promise<void> {\n    const markdown = this.toMarkdown(conversation);\n    const filename = this.generateFilename(conversation);\n\n    // Create blob\n    const blob = new Blob([markdown], { type: 'text/markdown' });\n    const url = URL.createObjectURL(blob);\n\n    // Trigger download using Chrome Downloads API\n    if (chrome.downloads) {\n      chrome.downloads.download({\n        url: url,\n        filename: `LivingNexusArchive/AI_Conversations/${filename}`,\n        saveAs: false // Auto-save to Downloads folder\n      }, (downloadId) => {\n        console.log('[LNA] Markdown file saved:', filename);\n        URL.revokeObjectURL(url);\n      });\n    }\n  }\n\n  /**\n   * Generate filename for markdown file\n   */\n  private generateFilename(conversation: AIConversation): string {\n    const date = new Date(conversation.timestamp);\n    const dateStr = date.toISOString().split('T')[0]; // YYYY-MM-DD\n    \n    // Sanitize title for filename\n    const sanitizedTitle = conversation.title\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, '-')\n      .replace(/^-+|-+$/g, '')\n      .substring(0, 50);\n\n    return `${dateStr}_${sanitizedTitle}.md`;\n  }\n\n  /**\n   * Log a new conversation\n   */\n  async logConversation(\n    platform: AIPlatform,\n    messages: AIMessage[],\n    metadata?: Partial<AIConversation>\n  ): Promise<AIConversation> {\n    const conversation: AIConversation = {\n      id: this.generateId(),\n      platform,\n      messages,\n      title: metadata?.title || this.generateTitle(messages),\n      tags: metadata?.tags || this.autoTag(messages),\n      timestamp: Date.now(),\n      wordCount: this.calculateWordCount(messages),\n      ...metadata\n    };\n\n    await this.saveConversation(conversation);\n    return conversation;\n  }\n\n  /**\n   * Generate unique ID\n   */\n  private generateId(): string {\n    return `${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n  }\n\n  /**\n   * Get all conversations\n   */\n  async getAllConversations(): Promise<AIConversation[]> {\n    if (!this.db) {\n      await this.initDatabase();\n    }\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['conversations'], 'readonly');\n      const store = transaction.objectStore('conversations');\n      const request = store.getAll();\n\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  /**\n   * Search conversations\n   */\n  async searchConversations(query: string): Promise<AIConversation[]> {\n    const allConversations = await this.getAllConversations();\n    const lowerQuery = query.toLowerCase();\n\n    return allConversations.filter(conv => {\n      // Search in title\n      if (conv.title.toLowerCase().includes(lowerQuery)) return true;\n\n      // Search in tags\n      if (conv.tags.some(tag => tag.toLowerCase().includes(lowerQuery))) return true;\n\n      // Search in message content\n      if (conv.messages.some(msg => msg.content.toLowerCase().includes(lowerQuery))) return true;\n\n      return false;\n    });\n  }\n\n  /**\n   * Get conversations by platform\n   */\n  async getConversationsByPlatform(platform: AIPlatform): Promise<AIConversation[]> {\n    if (!this.db) {\n      await this.initDatabase();\n    }\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['conversations'], 'readonly');\n      const store = transaction.objectStore('conversations');\n      const index = store.index('platform');\n      const request = index.getAll(platform);\n\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  /**\n   * Get conversations by tag\n   */\n  async getConversationsByTag(tag: string): Promise<AIConversation[]> {\n    if (!this.db) {\n      await this.initDatabase();\n    }\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['conversations'], 'readonly');\n      const store = transaction.objectStore('conversations');\n      const index = store.index('tags');\n      const request = index.getAll(tag);\n\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  /**\n   * Export conversation as markdown\n   */\n  async exportConversation(conversationId: string): Promise<string> {\n    if (!this.db) {\n      await this.initDatabase();\n    }\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['conversations'], 'readonly');\n      const store = transaction.objectStore('conversations');\n      const request = store.get(conversationId);\n\n      request.onsuccess = () => {\n        if (request.result) {\n          resolve(this.toMarkdown(request.result));\n        } else {\n          reject(new Error('Conversation not found'));\n        }\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  /**\n   * Delete conversation\n   */\n  async deleteConversation(conversationId: string): Promise<void> {\n    if (!this.db) {\n      await this.initDatabase();\n    }\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['conversations'], 'readwrite');\n      const store = transaction.objectStore('conversations');\n      const request = store.delete(conversationId);\n\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  /**\n   * Get statistics\n   */\n  async getStatistics(): Promise<{\n    totalConversations: number;\n    totalWordCount: number;\n    conversationsByPlatform: Record<AIPlatform, number>;\n    conversationsByTag: Record<string, number>;\n  }> {\n    const conversations = await this.getAllConversations();\n\n    const stats = {\n      totalConversations: conversations.length,\n      totalWordCount: conversations.reduce((sum, conv) => sum + conv.wordCount, 0),\n      conversationsByPlatform: {} as Record<AIPlatform, number>,\n      conversationsByTag: {} as Record<string, number>\n    };\n\n    // Count by platform\n    conversations.forEach(conv => {\n      stats.conversationsByPlatform[conv.platform] = \n        (stats.conversationsByPlatform[conv.platform] || 0) + 1;\n    });\n\n    // Count by tag\n    conversations.forEach(conv => {\n      conv.tags.forEach(tag => {\n        stats.conversationsByTag[tag] = (stats.conversationsByTag[tag] || 0) + 1;\n      });\n    });\n\n    return stats;\n  }\n}\n\n// Export singleton instance\nexport const aiLogger = new AIConversationLogger();\n\n"],"names":[],"mappings":"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"}